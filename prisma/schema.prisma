// prisma/schema.prisma
// SMB OS — Core data model (SQLite now → Postgres later)
// Terms:
// - Tenant: a customer company; their data is isolated
// - Module: a feature bundle (inventory, invoices, etc.)
// - Entitlement: “Tenant X can use Module Y” (+ optional limits)
// Notes:
// - Soft delete via deletedAt on Tenant/User where sensible
// - Audit every critical admin action in AuditLog
// - Email unique per tenant (not globally)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// ---- Enums ----

enum TenantStatus {
  ACTIVE
  SUSPENDED
}

enum UserRole {
  ADMIN
  MEMBER
}

// NEW — Platform-level roles (L1/L2)
enum PlatformRole {
  DEVELOPER // L1
  APP_ADMIN // L2
}

// NEW — Tenant-scoped roles (L3/L4/L5)
enum TenantMemberRole {
  TENANT_ADMIN // L3
  MANAGER      // L4
  MEMBER       // L5
}

/// ---- Models ----

model Tenant {
  id     String       @id @default(cuid())
  name   String
  status TenantStatus @default(ACTIVE)

  /// Manual activation end date (extend on cash/wire renewal)
  activatedUntil DateTime?

  /// Default UI language for this tenant (e.g., "en", "ar")
  defaultLocale String @default("en")

  /// Industry/type of this tenant, used for presets (pharmacy|factory|services, etc.)
  industry String?                     // ← optional

  // --- Hierarchy (parent/child tenants) ---
  parentTenantId String?               // ← optional
  parent         Tenant?  @relation("TenantChildren", fields: [parentTenantId], references: [id])
  children       Tenant[] @relation("TenantChildren")

  // Soft delete
  deletedAt DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users        User[]
  entitlements Entitlement[]
  auditLogs    AuditLog[]

  // NEW — Pyramids
  memberships      TenantMembership[]
  userEntitlements UserEntitlement[]

  @@index([status])
  @@index([activatedUntil])
  @@index([parentTenantId])
  @@map("Tenants")
}

model User {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  name         String
  email        String
  /// Username sign-in (unique per tenant)
  username     String                    // ← REQUIRED
  passwordHash String
  role         UserRole @default(MEMBER)

  /// Optional per-user language override (falls back to tenant default)
  localeOverride String?                 // ← optional

  // Soft delete
  deletedAt DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Audit relation (actorUserId)
  auditLogs AuditLog[]

  // NEW — Pyramids back-relations
  appRoles          AppRole[]
  memberships       TenantMembership[]
  supervisedMembers TenantMembership[] @relation("SupervisorRelation")
  userEntitlements  UserEntitlement[]

  // NEW — Local auth sessions (back-relation)
  sessions AuthSession[]

  // Uniques / indexes
  @@unique([tenantId, email])
  @@unique([tenantId, username])        // ← per-tenant uniqueness
  @@index([tenantId, role])
  @@map("Users")
}

model Module {
  /// Stable key (e.g., "inventory", "invoices")
  key         String  @id
  name        String
  description String?                     // ← optional

  createdAt DateTime @default(now())

  entitlements     Entitlement[]
  // NEW — Pyramids
  userEntitlements UserEntitlement[]

  @@map("Modules")
}

model Entitlement {
  /// Composite key: one row per (tenant, module)
  tenantId  String
  moduleKey String

  tenant Tenant @relation(fields: [tenantId], references: [id])
  module Module @relation(fields: [moduleKey], references: [key])

  /// Server-side gate: if false/missing → return 403 & hide related UI
  isEnabled Boolean @default(false)

  /// Optional JSON blob for limits/feature flags (e.g., { "maxUsers": 5 })
  limitsJson Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([tenantId, moduleKey])
  @@index([tenantId])
  @@index([moduleKey])
  @@map("Entitlements")
}

model AuditLog {
  id String @id @default(cuid())

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  /// The user who performed the action (admin/member). Can be null for system actions.
  actorUserId String?                  // ← optional
  actor       User?   @relation(fields: [actorUserId], references: [id])

  /// Short verb, e.g., "TENANT_CREATE", "ENTITLEMENT_TOGGLE", "ACTIVATION_EXTEND"
  action String

  /// Additional context (e.g., old/new values, request IP) — arbitrary JSON
  metaJson Json?

  createdAt DateTime @default(now())

  @@index([tenantId])
  @@index([actorUserId])
  @@index([action])
  @@map("AuditLog")
}

// ======== NEW: Project Pyramids — Phase 0 (surrogate PKs) ========

model AppRole {
  id     String       @id @default(cuid())
  userId String
  role   PlatformRole
  user   User         @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, role])
  @@index([role])
  @@map("AppRoles")
}

model TenantMembership {
  id       String           @id @default(cuid())
  userId   String
  tenantId String
  role     TenantMemberRole
  isActive Boolean          @default(true)

  /// Optional supervisor for L5 (and sometimes L4). Points to another User.
  supervisorId String?      // ← optional
  supervisor   User?   @relation("SupervisorRelation", fields: [supervisorId], references: [id])

  /// Modules this member can grant to their subordinates (L4 delegating to L5)
  grantableModules Json?

  user   User   @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tenantId]) // one membership per tenant
  @@index([tenantId, role])
  @@index([supervisorId])
  @@map("TenantMemberships")
}

model UserEntitlement {
  id        String @id @default(cuid())
  userId    String
  tenantId  String
  moduleKey String

  user   User   @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])
  module Module @relation(fields: [moduleKey], references: [key])

  isEnabled Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tenantId, moduleKey])
  @@index([tenantId])
  @@index([moduleKey])
  @@map("UserEntitlements")
}

// ======== Local Auth Sessions ========

model AuthSession {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  expiresAt DateTime
  revokedAt DateTime?

  @@index([userId])
  @@index([expiresAt])
  @@map("AuthSessions")
}
